import java.util.*;//imports the java utlities module	
import java.io.*;//imports the io package
import java.text.SimpleDateFormat;//imports the simple date format package which allows for more simple dates
import java.util.Random;//imports the java utilities for the random function

public class AdmissionList extends Admission
{
	//======================== Entity Attributes ===================
	
	Admission[] admissionlist;//declares the list of admissions 
	Admission tempAdmission;//creates an empty instance of admission
	int nextPosition;//creates an attribute which points to the next index of admission
	SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
	SimpleDateFormat ftTimeInc = new SimpleDateFormat ("dd/MM/yyyy k:m");
	
	//in this method we pass in an incomplete admission with validated data
	//the system then assigns any remaining attributes to the value
	//in particular the ID is generated by incrementing the current admission number
	//Any arrays then get concateneated together
	//important null values such as diagnosis is set to PENDING singnalling to the system that it needs updating at some pointer/
	//all the values are then concateneated togther
	//the patient's file is read and then extended by 1 (make room for the new admission)
	//new contents are written to file
	public Admission createNewAdmission(Admission admission,Patient patient,int numOfAreas)
	{
		
		patient.numberOfAdmissions++;
		updateDemographicDetails(patient);
		String stringNum = patient.numberOfAdmissions+"";
		while(stringNum.length()< 7)
		{//termination condition when satisified 
			stringNum ="0"+stringNum;//adds a zero untill there are 7 zero's
		}
		admission.admissionID ="A"+patient.surName.substring(0,3).toUpperCase()+stringNum;
		//System.out.println(admission.admissionID);
		admission.numberOfDocuments = 0;
		Date currentTime = new Date();//declares the date of the closest appointment		
		admission.dateAdmissionCreated = currentTime;
		String concatenatedSymptoms = admission.listOfSymptoms[0]+"@"+ admission.listOfSymptoms[1]+"@"+ admission.listOfSymptoms[2]+"@"+ admission.listOfSymptoms[3];
		String concatenatedAreasAffected=admission.listOfAreasAffected[0]+"@";
		admission.requested = false;
		admission.active = true;

		for(int indexAreasCount = 1;indexAreasCount<numOfAreas;indexAreasCount++)
		{
			concatenatedAreasAffected=concatenatedAreasAffected+admission.listOfAreasAffected[indexAreasCount]+"@";
			
		}
		admission.currentDiagnosis="PENDING";
		String concatenatedAdmission = admission.admissionID+","+admission.consultantID+","+admission.numberOfDocuments+","+admission.ward+","+concatenatedSymptoms+","+admission.active+","+ft.format(admission.dateAdmissionCreated)+","+admission.currentDiagnosis+","+concatenatedAreasAffected+","+admission.typeOfPain+","+admission.requested;
		//writing it to file
		//pulls the contents of patient file and adds a new space in the array
		String[] patientDetails = extendArrayByOne(rffReturnFullFile(patient.patientID+"_file.txt"));
		patientDetails[patientDetails.length-1] = concatenatedAdmission;
		writeNewDataTofile(patientDetails,patient.patientID+"_file.txt");
		
		return(admission);
	}
	
	//A more advanced instance retrieval method.
	//For the admission instance the entire file is passed through including the location our desired admission is also.
	//We then read directly from the index and get the demographic as a concatenated string
	//This is split then assigned to an instnace of admission through parsing
	//We then check for any documents that occur undeneath, if do we read the line and then call the document retrieving method 
	//Also we finally check for a booking and call the booking retrieveal method also if need be
	//The last thing is the admisison is then passed back to the calling method
	public Admission retrieveAdmission(int indexAdmissionsOccur,String[] entireArray)
	{
		String stringedAdmission = entireArray[indexAdmissionsOccur];
		tempAdmission = new Admission();
		//System.out.println("DATA "+stringedAdmission);
		String[] admissionDetails = stringedAdmission.split(",");
		////System.out.println("id" +admissionDetails[0]);
		tempAdmission.admissionID = admissionDetails[0];//the attribute is set from the correct index from the array
		tempAdmission.consultantID = admissionDetails[1];//the attribute is set from the correct index from the array
		tempAdmission.numberOfDocuments = Integer.parseInt(admissionDetails[2]);//the attribute is set from the correct index from the array
		////System.out.println(tempAdmission.admissionID+" has "+tempAdmission.numberOfDocuments+" documents");
		tempAdmission.ward = admissionDetails[3];//the attribute is set from the correct index from the array
		String stringedSymptoms = admissionDetails[4];//the attribute is set from the correct index from the array
		tempAdmission.listOfSymptoms = stringedSymptoms.split("@");
		tempAdmission.active = Boolean.parseBoolean(admissionDetails[5]);//the attribute is set from the correct index from the array
		tempAdmission.typeOfPain = admissionDetails[9];//the attribute is set from the correct index from the array
		tempAdmission.requested = Boolean.parseBoolean(admissionDetails[10]);//the attribute is set from the correct index from the array
		try
		{
			tempAdmission.dateAdmissionCreated = ft.parse(admissionDetails[6]);//the attribute is set from the correct index from the array
		}
		catch(Exception exc)//if any errrors are found they are caught here		
		{
			//System.out.println("error");
		}
		tempAdmission.currentDiagnosis = admissionDetails[7];//the attribute is set from the correct index from the array
		tempAdmission.listOfAreasAffected = admissionDetails[8].split("@");//the attribute is set from the correct index from the array
		tempAdmission.listOfDocuments= new Document[tempAdmission.numberOfDocuments];
		//HERE PULL EVERY DOCUMENT
		//System.out.println("NUMBER OF SOCUMENTS "+tempAdmission.numberOfDocuments);
	
		try
		{	if(indexAdmissionsOccur+1<entireArray.length)
			{
				if(entireArray[indexAdmissionsOccur+1].substring(0,1).equals("B"))
				{
					tempAdmission.upComingBooking = new Booking();
					tempAdmission.upComingBooking=tempAdmission.upComingBooking.retrieveBooking(entireArray[indexAdmissionsOccur+1].split(","));
				}
			}
		}
		catch(Exception exc)//if any errrors are found they are caught here	, i.e null pointer/ out of bounds either way indicate that no booking exists
		{
			Booking newTempBooking = new Booking();
			//System.out.println("no booking found at admission "+tempAdmission.admissionID);
			newTempBooking.room ="Null";
			tempAdmission.upComingBooking =newTempBooking;

		}
		
	
	
	
		for(int counterDocumentLoop = 0;counterDocumentLoop<tempAdmission.numberOfDocuments;counterDocumentLoop++)
		{
			Document document = new Document();
			
			if(entireArray[indexAdmissionsOccur+1].substring(0,1).equals("B"))
			{
				document =document.setRetrievedDocument(entireArray[indexAdmissionsOccur+2+counterDocumentLoop]);
			}
			else
			{
				document =document.setRetrievedDocument(entireArray[indexAdmissionsOccur+1+counterDocumentLoop]);
			}
			
			
			//Change +1 to + 2 to account for new booking

			tempAdmission.listOfDocuments[counterDocumentLoop]=document;
			////System.out.println("Document ID "+tempAdmission.listOfDocuments[counterDocumentLoop].documentID);
		}
		return(tempAdmission);//returns the admission
	}
	
	//Method used to update the patients admission on the system
	//Here we pass the newly updated instance through
	//Initlaly all the attributes held in arrays for the instance are immiedaelty concatenated into a singlge stringNum
	//After this we then perform a search through the patients file held in an array and locates the old admission and replaces it 
	//Item is then passed through to file writer which updates admission
	public void updateAdmission(Patient patient,Admission admission,int numOfAreas)
	{

		String concatenatedSymptoms =""; 
		
		try
		{
			concatenatedSymptoms= admission.listOfSymptoms[0];
		}
		catch(Exception exc){}
		try
		{
			concatenatedSymptoms = concatenatedSymptoms+"@"+ admission.listOfSymptoms[1];
		}
		catch(Exception exc){}
		try
		{
			concatenatedSymptoms = concatenatedSymptoms+"@"+ admission.listOfSymptoms[2];
		}
		catch(Exception exc){}
		try
		{
			concatenatedSymptoms = concatenatedSymptoms+"@"+ admission.listOfSymptoms[3];
		}
		catch(Exception exc){}
		String concatenatedAreasAffected=admission.listOfAreasAffected[0]+"@";
		for(int indexAreasCount = 1;indexAreasCount<numOfAreas;indexAreasCount++)
		{
			try
			{
				if(admission.listOfAreasAffected[indexAreasCount].contains("null")==false)
				{
					concatenatedAreasAffected=concatenatedAreasAffected+admission.listOfAreasAffected[indexAreasCount]+"@";
				}
			}
			catch(Exception exc){}
		}
		String concatenatedAdmission = admission.admissionID+","+admission.consultantID+","+admission.numberOfDocuments+","+admission.ward+","+concatenatedSymptoms+","+admission.active+","+ft.format(admission.dateAdmissionCreated)+","+admission.currentDiagnosis+","+concatenatedAreasAffected+","+admission.typeOfPain+","+admission.requested;
		String[] fullPatientfile = rffReturnFullFile(patient.patientID+"_file.txt");
		int[] indexesAdmissionsOccur = retrieveIndexesAdmissionsOccur(fullPatientfile,patient.numberOfAdmissions);
		int lineAdmissionOccurs = -1;
		//for loop that goes through every admission for the patient(finding the line it occurs at)
		for(int counter = 0;counter<indexesAdmissionsOccur.length;counter++)
		{
			if(fullPatientfile[indexesAdmissionsOccur[counter]].substring(0,11).equals(admission.admissionID)==true)
			{
				lineAdmissionOccurs =indexesAdmissionsOccur[counter];
				
				fullPatientfile[lineAdmissionOccurs] = concatenatedAdmission;
				
				writeNewDataTofile(fullPatientfile,patient.patientID+"_file.txt");
				
			}
			
		}
		for(int counter1 = 0;counter1<fullPatientfile.length;counter1++)
		{
			//System.out.println(fullPatientfile[counter1]);
			
		}
	}
}
